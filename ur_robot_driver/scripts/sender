import sys

import rospy
import actionlib
from std_msgs.msg import Float64MultiArray
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from controller_manager_msgs.srv import SwitchControllerRequest, SwitchController
from controller_manager_msgs.srv import LoadControllerRequest, LoadController
from controller_manager_msgs.srv import ListControllers, ListControllersRequest
import geometry_msgs.msg as geometry_msgs
from cartesian_control_msgs.msg import (
    FollowCartesianTrajectoryAction,
    FollowCartesianTrajectoryGoal,
    CartesianTrajectoryPoint,
)
import os 
import pyrebase
import json

api_key = os.getenv("API_KEY")
if api_key is None:
    raise ValueError("No API key found. Please set the API_KEY environment variable.")


# Compatibility for python2 and python3
if sys.version_info[0] < 3:
    input = raw_input

# Configure the Firebase app
config = {
    "apiKey": api_key,
    "authDomain": "crafts-extended.firebaseapp.com",
    "databaseURL": "https://crafts-extended-default-rtdb.europe-west1.firebasedatabase.app",
    "storageBucket": "crafts-extended.appspot.com",
}

# If your robot description is created with a tf_prefix, those would have to be adapted
JOINT_NAMES = [
    "shoulder_pan_joint",
    "shoulder_lift_joint",
    "elbow_joint",
    "wrist_1_joint",
    "wrist_2_joint",
    "wrist_3_joint",
]

# All of those controllers can be used to execute joint-based trajectories.
# The scaled versions should be preferred over the non-scaled versions.
JOINT_TRAJECTORY_CONTROLLERS = [
    "scaled_pos_joint_traj_controller",
    "scaled_vel_joint_traj_controller",
    "pos_joint_traj_controller",
    "vel_joint_traj_controller",
    "forward_joint_traj_controller",
]

# All of those controllers can be used to execute Cartesian trajectories.
# The scaled versions should be preferred over the non-scaled versions.
CARTESIAN_TRAJECTORY_CONTROLLERS = [
    "pose_based_cartesian_traj_controller",
    "joint_based_cartesian_traj_controller",
    "forward_cartesian_traj_controller",
]

# We'll have to make sure that none of these controllers are running, as they will
# be conflicting with the joint trajectory controllers
CONFLICTING_CONTROLLERS = ["joint_group_vel_controller", "twist_controller"]

# Configuration
MQTT_SERVER = "test.mosquitto.org"
MODE_TOPIC = "carpenters_robot/mode"
TCP_TOPIC = "carpenters_robot/tcp"
IMAGE_TOPIC = "carpenters_robot/img"
ID_TOPIC = "carpenters_robot/id"
STATUS_TOPIC = "carpenters_robot/status"
SPEED_TOPIC = "carpenters_robot/speed"
COMMANDS_TOPIC = "carpenters_robot/commands"
TLS_PORT = 8081
NORMAL_PORT = 1883

# Filepaths
DESIGN_FILEPATH = "/home/github/crafts_extended/json/design_frames.json"
ALIGNMENT_FILEPATH = "/home/github/crafts_extended/json/alignment_frames.json"
TOOLPATH = "/home/github/crafts_extended/json/toolpath.json"
FIREBASE_CRED_PATH = "/home/github/crafts_extended/json/crafts-extended-firebase-adminsdk-9by4u-dbb1c0b4e9.json"

# ROS Topics
TOOLFRAME_TOPIC = "/tf"
FREEDRIVE_TOPIC = "/ur_hardware_interface/enable_freedrive_mode"
SET_TCP_TOPIC = "/ur_hardware_interface/set_tcp"

# Services
SET_SPEED_TOPIC = "/ur_hardware_interface/set_speed_slider"
SET_IO_TOPIC = "/ur_hardware_interface/set_io"
PLAY_TOPIC = "/ur_hardware_interface/dashboard/play"
STOP_TOPIC = "/ur_hardware_interface/dashboard/stop"

# Global Variables
# MODES: 0 - DESIGN; 1 - ALIGN; 2 - NOFREE; 3 - MILLING
freedrive_pub = None
freedrive = False
cur_mode = 0

# TCP Values
spike = Float64MultiArray(data=[0.00886, -0.00011, 0.13213, 0.0, 0.0, 0.0])
# spike = geometry_msgs.Pose(
#     geometry_msgs.Vector3(0.00886, -0.00011, 0.13213),
#     geometry_msgs.Quaternion(0.0, 0.0, 0.0, 0.0),
# )

mill = Float64MultiArray(data=[0.00039, -0.18526, 0.05212, -1.2090, -1.2090, -1.2090])
# mill = geometry_msgs.Pose(
#     geometry_msgs.Vector3(0.00039, -0.18526, 0.05212),
#     geometry_msgs.Quaternion(0.0, 0.0, 0.0, 0.0),
# )
# 8.86,-0.11, 132.13, 0.0, 0.0, 0.0

alignment_pts = []

#################################################################################################
#################################################################################################
#                                                                                               #
#                                 Firebase related functions                                    #
#                                                                                               #
#################################################################################################

# set database paths
alignment = "alignment/"
actual_member = "actual_member/"
design_list = "design_list/"


# Initialize the Firebase app
firebase = pyrebase.initialize_app(config)
db = firebase.database()


# Function to set data in Realtime Database
def set_data_in_realtime_db(reference, data):
    db.child(reference).set(data)


def set_alignment():
    data = {"ID": "", "coordinates": [0, 0, 0]}
    set_data_in_realtime_db(alignment, data)


def get_current_design_id():
    member = db.child(actual_member).child("member_name").get().val()
    # doer snot have keys
    if member not in db.child(design_list).get().val():
        # set the member to the actual member
        return "000"
    return list(db.child(design_list).child(member).get().val())[-1]

def update_alignment(mesh_ID="default", pts=[0, 0, 0], marker_ids=["1", "2", "3"]):
    db.child(alignment).child("ID").set(mesh_ID)
    db.child(alignment).child("coordinates").set("")
    for pt, marker in zip(pts, marker_ids):
        db.child(alignment).child("coordinates").child(marker).set(pt)

def update_design(pt=[0, 0, 0], id="000"):
    member = db.child(actual_member).child("member_name").get().val()
    print(type(member))
    db.child(design_list).child(member).child(id).child("mesured").set(pt)

def get_actual_toolpath():
    member = db.child(actual_member).child("member_name").get().val()
    return db.child("toolpath").child(member).get().val()

#################################################################################################
#                                                                                               #
#                               Trajectory controllers                                          #
#                                                                                               #
#################################################################################################


class TrajectoryClient:
    """Small trajectory client to test a joint trajectory"""

    def __init__(self):
        timeout = rospy.Duration(5)
        self.switch_srv = rospy.ServiceProxy(
            "controller_manager/switch_controller", SwitchController
        )
        self.load_srv = rospy.ServiceProxy(
            "controller_manager/load_controller", LoadController
        )
        self.list_srv = rospy.ServiceProxy(
            "controller_manager/list_controllers", ListControllers
        )
        try:
            self.switch_srv.wait_for_service(timeout.to_sec())
        except rospy.exceptions.ROSException as err:
            rospy.logerr(
                "Could not reach controller switch service. Msg: {}".format(err)
            )
            sys.exit(-1)

        self.joint_trajectory_controller = JOINT_TRAJECTORY_CONTROLLERS[0]
        self.cartesian_trajectory_controller = CARTESIAN_TRAJECTORY_CONTROLLERS[0]

    def send_joint_trajectory(self, configs):
        """Creates a trajectory and sends it using the selected action server"""

        # make sure the correct controller is loaded and activated
        self.switch_controller(self.joint_trajectory_controller)
        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_joint_trajectory".format(self.joint_trajectory_controller),
            FollowJointTrajectoryAction,
        )

        # Wait for action server to be ready
        timeout = rospy.Duration(5)
        if not trajectory_client.wait_for_server(timeout):
            rospy.logerr("Could not reach controller action server.")
            sys.exit(-1)

        # Create and fill trajectory goal
        goal = FollowJointTrajectoryGoal()
        goal.trajectory.joint_names = JOINT_NAMES

        # The following list are arbitrary positions
        # Change to your own needs if desired
        position_list = []
        velocity_list = []
        duration_list = []
        for config in configs:
            position_list.append(config)
            velocity_list.append([0.05] * 6)
            duration_list.append(5.0 * (configs.index(config) + 1))

        for i, position in enumerate(position_list):
            point = JointTrajectoryPoint()
            point.positions = position
            point.velocities = velocity_list[i]
            point.time_from_start = rospy.Duration(duration_list[i])
            goal.trajectory.points.append(point)

        self.ask_confirmation(position_list)
        rospy.loginfo(
            "Executing trajectory using the {}".format(self.joint_trajectory_controller)
        )

        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()

        result = trajectory_client.get_result()
        rospy.loginfo(
            "Trajectory execution finished in state {}".format(result.error_code)
        )

    def send_cartesian_trajectory(self, trajectory):
        """Creates a Cartesian trajectory and sends it using the selected action server"""
        self.switch_controller(self.cartesian_trajectory_controller)

        # make sure the correct controller is loaded and activated
        goal = FollowCartesianTrajectoryGoal()

        trajectory_client = actionlib.SimpleActionClient(
            "{}/follow_cartesian_trajectory".format(
                self.cartesian_trajectory_controller
            ),
            FollowCartesianTrajectoryAction,
        )

        # Wait for action server to be ready
        timeout = rospy.Duration(5)
        if not trajectory_client.wait_for_server(timeout):
            rospy.logerr("Could not reach controller action server.")
            sys.exit(-1)

        # The following list are arbitrary positions
        # Change to your own needs if desired
        pose_list = []
        time_list = []

        for i, point in enumerate(trajectory):
            pose_list.append(
                geometry_msgs.Pose(
                    geometry_msgs.Vector3(
                        point["point"][0], point["point"][1], point["point"][2]
                    ),
                    geometry_msgs.Quaternion(*point["orientation"]),
                )
            )
            time_list.append(point["timestamp"])


        for pose, time in zip(pose_list, time_list):
            trajectory_point = CartesianTrajectoryPoint()
            trajectory_point.pose = pose
            trajectory_point.twist = geometry_msgs.Twist(
                linear=geometry_msgs.Vector3(0.005, 0.005, 0.005),
                angular=geometry_msgs.Vector3(0.005, 0.005, 0.005),
            )
            trajectory_point.acceleration = geometry_msgs.Accel(
                linear=geometry_msgs.Vector3(0.005, 0.005, 0.005),
                angular=geometry_msgs.Vector3(0.005, 0.005, 0.005),
            )
            trajectory_point.time_from_start = rospy.Duration(time)

            goal.trajectory.points.append(trajectory_point)

        self.ask_confirmation(pose_list)

        rospy.loginfo(
            "Executing trajectory using the {}".format(
                self.cartesian_trajectory_controller
            )
        )
        trajectory_client.send_goal(goal)
        trajectory_client.wait_for_result()

        result = trajectory_client.get_result()

        rospy.loginfo(
            "Trajectory execution finished in state {}".format(result.error_code)
        )

    ###############################################################################################
    #                                                                                             #
    # Methods defined below are for the sake of safety / flexibility of this demo script only.    #
    # If you just want to copy the relevant parts to make your own motion script you don't have   #
    # to use / copy all the functions below.                                                      #
    #                                                                                             #
    ###############################################################################################

    def ask_confirmation(self, waypoint_list):
        """Ask the user for confirmation. This function is obviously not necessary, but makes sense
        in a testing script when you know nothing about the user's setup."""
        rospy.logwarn(
            "The robot will move to the following waypoints: \n{}".format(waypoint_list)
        )
        confirmed = False
        valid = False
        while not valid:
            input_str = input(
                "Please confirm that the robot path is clear of obstacles.\n"
                "Keep the EM-Stop available at all times. You are executing\n"
                "the motion at your own risk. Please type 'y' to proceed or 'n' to abort: "
            )
            valid = input_str in ["y", "n"]
            if not valid:
                rospy.loginfo("Please confirm by entering 'y' or abort by entering 'n'")
            else:
                confirmed = input_str == "y"
        if not confirmed:
            rospy.loginfo("Exiting as requested by user.")
            sys.exit(0)

    def switch_controller(self, target_controller):
        """Activates the desired controller and stops all others from the predefined list above"""
        other_controllers = (
            JOINT_TRAJECTORY_CONTROLLERS
            + CARTESIAN_TRAJECTORY_CONTROLLERS
            + CONFLICTING_CONTROLLERS
        )

        other_controllers.remove(target_controller)

        srv = ListControllersRequest()
        response = self.list_srv(srv)
        for controller in response.controller:
            if controller.name == target_controller and controller.state == "running":
                return

        srv = LoadControllerRequest()
        srv.name = target_controller
        self.load_srv(srv)

        srv = SwitchControllerRequest()
        srv.stop_controllers = other_controllers
        srv.start_controllers = [target_controller]
        srv.strictness = SwitchControllerRequest.BEST_EFFORT
        self.switch_srv(srv)

if __name__ == "__main__":
    # import json
    import json

    rospy.init_node("trajectory_client", anonymous=True)

    mover = TrajectoryClient()


    toolpath = json.loads(get_actual_toolpath())

    config = toolpath[1]["data"]["joint_values"]

    # mover.send_joint_trajectory([config])
    rospy.sleep(0.5)
    mover.send_cartesian_trajectory(trajectory=toolpath[3:])
