#!/usr/bin/env python

import rospy
import json
import time
import signal
import logging
import paho.mqtt.client as mqtt
from tf2_msgs.msg import TFMessage
from std_msgs.msg import Float64
from ur_msgs.srv import SetSpeedSliderFraction, SetIO
from std_srvs.srv import Trigger

# Configuration
MQTT_SERVER = "test.mosquitto.org"
FREE_TOPIC = "carpenters_robot/free"
TCP_TOPIC = "carpenters_robot/tcp"
IMAGE_TOPIC = "carpenters_robot/img"
ID_TOPIC = "carpenters_robot/id"
NICLAIOT_TOPIC = "carpenters_robot/iot"
CONFIRM_TOPIC = "carpenters_robot/confirm"
SPEED_TOPIC = "carpenters_robot/speed"
TLS_PORT = 8081
NORMAL_PORT = 1883
FILEPATH = "/home/github/crafts_extended/json/tcp_frames.json"

# Global Variables
freedrive_pub = None
freedrive = False

# Setup logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


def tf_callback(data):
    try:
        tcp_frame = {
            "position": data.transforms[0].transform.translation,
            "rotation": data.transforms[0].transform.rotation,
        }
        with open(FILEPATH, "w") as f:
            json.dump(tcp_frame, f)
        rospy.signal_shutdown("Data saved")
    except Exception as e:
        logging.error(f"Error in tf_callback: {e}")


def listener():
    rospy.Subscriber("/tf", TFMessage, tf_callback)
    rospy.spin()


def set_speed(speed):
    try:
        rospy.wait_for_service("/ur_hardware_interface/set_speed_slider")
        speed_fraction = rospy.ServiceProxy(
            "/ur_hardware_interface/set_speed_slider", SetSpeedSliderFraction
        )
        speed_fraction(speed)
    except rospy.ServiceException as e:
        logging.error(f"Service call failed: {e}")


def play_program():
    try:
        rospy.wait_for_service("/ur_hardware_interface/dashboard/play")
        play = rospy.ServiceProxy("/ur_hardware_interface/dashboard/play", Trigger)
        play()
    except rospy.ServiceException as e:
        logging.error(f"Service call failed: {e}")


def stop_program():
    try:
        rospy.wait_for_service("/ur_hardware_interface/dashboard/stop")
        stop = rospy.ServiceProxy("/ur_hardware_interface/dashboard/stop", Trigger)
        stop()
    except rospy.ServiceException as e:
        logging.error(f"Service call failed: {e}")


def set_io(id, value=False):
    try:
        rospy.wait_for_service("/ur_hardware_interface/set_io")
        setio = rospy.ServiceProxy("/ur_hardware_interface/set_io", SetIO)
        val = 1.0 if value else 0.0
        setio(1, id, val)
    except rospy.ServiceException as e:
        logging.error(f"Service call failed: {e}")


def freedrive_on():
    stop_program()
    set_io(1, True)
    rospy.sleep(0.5)
    freedrive_pub.publish(1.0)


def freedrive_off():
    set_io(1, False)
    rospy.sleep(0.5)


def on_connect(client, userdata, flags, rc):
    logging.info(f"Connected with result code {rc}")
    client.subscribe(FREE_TOPIC)


def on_message(client, userdata, message):
    global freedrive
    msg = message.payload.decode("utf-8")
    if msg.strip() == '"FREEDRIVE"':
        if not freedrive:
            freedrive = True
            freedrive_on()
    elif msg.upper() == '"NO_FREEDRIVE"':
        if freedrive:
            freedrive = False
            freedrive_off()


def on_disconnect(client, userdata, rc):
    logging.info("Disconnected from MQTT broker.")


def handle_shutdown(signum, frame):
    logging.info("Exiting...")
    client.loop_stop()
    client.disconnect()
    rospy.signal_shutdown("KeyboardInterrupt")


if __name__ == "__main__":
    signal.signal(signal.SIGINT, handle_shutdown)
    signal.signal(signal.SIGTERM, handle_shutdown)

    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message
    client.on_disconnect = on_disconnect

    try:
        client.connect(MQTT_SERVER, NORMAL_PORT, 60)
        client.loop_start()
    except Exception as e:
        logging.error(f"Failed to connect to MQTT broker: {e}")
        exit(1)

    rospy.init_node("worker", anonymous=True)
    freedrive_pub = rospy.Publisher(
        "/ur_hardware_interface/enable_freedrive_mode", Float64, queue_size=10
    )

    # listener()
